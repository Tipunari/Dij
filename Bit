Character Counting
Character counting involves prefixing the frame with a count of the number of characters in the frame.
c
#include <stdio.h>
#include <string.h>

void characterCountFraming(char *input) {
    int len = strlen(input);
    printf("Frame: %d %s\n", len, input);
}
int main() {
    char input[100];
    printf("Enter the data: ");
    gets(input);
    characterCountFraming(input);
    return 0;
}
OUTPUT: Enter the Data: DIVYA
Frame:5DIVYA

Character Stuffing
Character stuffing involves inserting a special "ESC" character before any occurrence of a frame delimiter in the data.

c
#include <stdio.h>
#include <string.h>
void characterStuffing(char *input) {
    char stuffed[200];
    int j = 0;
    stuffed[j++] = 'D';  // Start delimiter
    for (int i = 0; i < strlen(input); i++) {
        if (input[i] == 'D' || input[i] == 'E') {  // Frame delimiter or ESC character
            stuffed[j++] = 'E';
        }
        stuffed[j++] = input[i];
    }
    stuffed[j++] = 'D';  // End delimiter
    stuffed[j] = '\0';
    printf("Stuffed frame: %s\n", stuffed);
}
int main() {
    char input[100];
    printf("Enter the data: ");
    gets(input);
    characterStuffing(input);
    return 0;
}
OUTPUT: Enter the Data: DIVYA
Stuffed Frame: DDIVYAD
Bit Stuffing
Bit stuffing involves inserting a '0' after five consecutive '1's in the data.
c
#include <stdio.h>
#include <string.h>
void bitStuffing(char *input) 
{
    char stuffed[200];
    int j = 0, count = 0;
    for (int i = 0; i < strlen(input); i++) {
        if (input[i] == '1') {
            count++;
        } else {
            count = 0;
        }
        stuffed[j++] = input[i];
        if (count == 5) {
            stuffed[j++] = '0';
            count = 0;
        }
    }
    stuffed[j] = '\0';
    printf("Stuffed frame: %s\n", stuffed);
}
int main() {
    char input[100];
    printf("Enter the data (binary string): ");
    gets(input);
    bitStuffing(input);
    return 0;
}
OUTPUT: Enter the data(binary data): SPEF
Stuffed frame: SPEF
